buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'net.researchgate.release'
apply plugin: 'signing'
apply plugin: 'maven'

sourceCompatibility = '8'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')

    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    manifest {
        attributes 'Implementation-Title': 'Springify Multiconfig',
                'Implementation-Version': version
    }
}

// publish locally
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

def v_ossrhUsername = "FOO"
def v_ossrhPassword = "BAR"

if (project.hasProperty("ossrhUsername")) {
    v_ossrhUsername = ossrhUsername
}
if (project.hasProperty("ossrhPassword")) {
    v_ossrhPassword = ossrhPassword
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: maven2_url) {
                authentication(userName: v_ossrhUsername, password: v_ossrhPassword)
            }
            snapshotRepository(url: snapshot_url) {
                authentication(userName: v_ossrhUsername, password: v_ossrhPassword)
            }
            pom.project {
                name project_name
                artifactId archivesBaseName
                packaging 'jar'
                version version
                description project_description
                url project_url
                scm {
                    connection project_scm
                    developerConnection project_scm
                    url project_url
                }
                licenses {
                    license {
                        name project_license_slug
                        url project_license_url
                    }
                }
                developers {
                    developer {
                        id project_developer
                        name project_developer
                    }
                }
            }
        }
    }
}

/*
 * For each release, push the released artifacts to OSS sonatype
 */
afterReleaseBuild.dependsOn uploadArchives
